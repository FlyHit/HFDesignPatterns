package newTour;

/**
 * 设计原则1：将应用中变化的部分独立起来
 * 该应用中鸭子的行为（飞和叫）会因鸭子种类的不同而改变
 * 设计原则2：针对接口编程，而不是针对实现编程
 * 利用接口代表每个行为，然后在设计一组其他类专门实现这些接口，由行为类而不是
 *Duck类实现行为接口，这么一来Duck类就无需知道行为的实现细节。
 * 这样Duck的子类也不会和具体的行为绑定，而是“有一个”行为，好处是可以“有一个”
 * 其他行为。即改变拥有的行为。
 * 由行为类实现接口，一来有了继承复用的好处，二来没了继承带来的包袱
 * 设计原则3：多用组合，少用继承（“有一个”即两个类组合起来使用）
 */
public interface FlyBehavior {
    void fly();
}
